---
import { Code2, ChevronDown, ChevronUp } from "lucide-react";
import type { ExperiencePosition } from "@/lib/types";
import Badge from "@/components/ui/badge.astro";
import { markdownToHtml } from "@/lib/markdown";

interface Props {
  position: ExperiencePosition;
}

const { position } = Astro.props;
---

<div>
  <div class="block w-full text-left">
    <div class="relative z-1 mb-1 flex items-center space-x-3">
      <Code2 className="size-4 bg-background" />
      <h3 class="text-base font-black underline-offset-4">
        {position.title}
      </h3>
    </div>
    <span
      class="flex items-center gap-2 pl-7 font-mono text-sm text-foreground"
    >
      {position.year}
    </span>
  </div>

  <div class="description-container my-4 overflow-hidden">
    <div
      class="description-content max-h-0 overflow-hidden transition-all duration-300"
    >
      <div
        set:html={markdownToHtml(
          position.description,
          "ml-7 text-sm leading-7"
        )}
      />

      {
        Array.isArray(position.skills) && position.skills.length > 0 && (
          <div class="mt-2 ml-7 flex max-w-full flex-wrap items-center justify-start gap-1.5 py-2">
            {position.skills.map((skill) => {
              return <Badge>{skill}</Badge>;
            })}
          </div>
        )
      }
    </div>

    <button
      class="toggle-btn mt-2 ml-7 flex cursor-pointer items-center gap-1 rounded-md border px-4 py-2 text-xs font-medium text-primary hover:underline focus:outline-none"
    >
      <span class="toggle-text">Show more</span>
      <ChevronDown className="toggle-icon-down size-4" />
      <ChevronUp className="toggle-icon-up hidden size-4" />
    </button>
  </div>
</div>

<style>
  .description-content.expanded {
    max-height: fit-content;
  }

  .description-container .toggle-icon-up.visible {
    display: block;
  }

  .description-container .toggle-icon-down.hidden {
    display: none;
  }
</style>

<script>
  document.addEventListener("astro:page-load", () => {
    const toggleButtons = document.querySelectorAll(".toggle-btn");

    toggleButtons.forEach((button, index) => {
      const container = button.closest(".description-container");
      if (!container) return;

      const content = container.querySelector(".description-content");
      const toggleText = button.querySelector(".toggle-text");
      const iconDown = button.querySelector(".toggle-icon-down");
      const iconUp = button.querySelector(".toggle-icon-up");

      if (index === 0) {
        if (content) content.classList.add("expanded");
        if (toggleText) toggleText.textContent = "Show less";
        if (iconDown) iconDown.classList.add("hidden");
        if (iconUp) iconUp.classList.remove("hidden");

        iconUp?.classList.add("visible");
      }

      button.addEventListener("click", () => {
        if (content) {
          content.classList.toggle("expanded");

          if (content.classList.contains("expanded")) {
            if (toggleText) toggleText.textContent = "Show less";
            if (iconDown) iconDown.classList.add("hidden");
            if (iconUp) iconUp.classList.remove("hidden");
            iconUp?.classList.add("visible");
          } else {
            if (toggleText) toggleText.textContent = "Show more";
            if (iconDown) iconDown.classList.remove("hidden");
            if (iconUp) iconUp.classList.add("hidden");
            iconUp?.classList.remove("visible");
          }
        }
      });
    });
  });
</script>
